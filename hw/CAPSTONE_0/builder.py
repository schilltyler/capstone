#!/usr/bin/env python3
"""
Builder script to generate config.h for the agent.
This converts IP address and port to network byte order at build time.
"""

import sys
import struct
import socket


def ip_to_bytes(ip_str):
    """Convert IP address string to 4 bytes in network byte order"""
    parts = ip_str.split(".")
    if len(parts) != 4:
        raise ValueError(f"Invalid IP address: {ip_str}")

    octets = []
    for part in parts:
        octet = int(part)
        if octet < 0 or octet > 255:
            raise ValueError(f"Invalid octet in IP: {part}")
        octets.append(octet)

    return octets


def port_to_bytes(port):
    """Convert port number to network byte order (big-endian uint16_t)"""
    if port < 0 or port > 65535:
        raise ValueError(f"Invalid port: {port}")

    # Network byte order is big-endian
    return struct.pack(">H", port)


def password_to_bytes(password_str):
    """Convert password string to byte array"""
    # Support hex string like "DEADBEEF"
    if password_str.startswith("0x"):
        password_str = password_str[2:]

    # Remove any spaces
    password_str = password_str.replace(" ", "")

    # Convert hex string to bytes
    try:
        password_bytes = bytes.fromhex(password_str)
    except ValueError:
        # If not hex, use as ASCII
        password_bytes = password_str.encode("ascii")

    return password_bytes


def generate_config(ip, port, password, output_file="inc/config.h"):
    """Generate config.h with network byte order conversions"""

    # Convert IP to bytes
    ip_octets = ip_to_bytes(ip)

    # Convert port to network byte order
    port_bytes = port_to_bytes(port)
    port_be = struct.unpack(">H", port_bytes)[0]

    # Convert password
    password_bytes = password_to_bytes(password)

    # Generate config.h
    with open(output_file, "w") as f:
        f.write("/* Auto-generated by builder.py - DO NOT EDIT */\n")
        f.write("#ifndef CONFIG_H\n")
        f.write("#define CONFIG_H\n\n")

        # Server IP (as 4 separate octets)
        f.write(f"/* Server IP: {ip} */\n")
        f.write(f"#define SERVER_IP_OCTET_0 {ip_octets[0]}\n")
        f.write(f"#define SERVER_IP_OCTET_1 {ip_octets[1]}\n")
        f.write(f"#define SERVER_IP_OCTET_2 {ip_octets[2]}\n")
        f.write(f"#define SERVER_IP_OCTET_3 {ip_octets[3]}\n\n")

        # Server port (in network byte order)
        f.write(f"/* Server Port: {port} (network byte order: 0x{port_be:04x}) */\n")
        f.write(f"#define SERVER_PORT {port}\n")
        f.write(f"#define SERVER_PORT_NBO htons(SERVER_PORT)\n\n")

        # Password
        f.write(f"/* Authentication password */\n")
        f.write(f"#define AUTH_PASSWORD_LEN {len(password_bytes)}\n")
        f.write("#define AUTH_PASSWORD { ")
        f.write(", ".join(f"0x{b:02x}" for b in password_bytes))
        f.write(" }\n\n")

        # Timeout
        f.write("/* Server read timeout for authentication (seconds) */\n")
        f.write("#define AUTH_TIMEOUT_SEC 2\n\n")

        f.write("#endif /* CONFIG_H */\n")

    print(f"Generated {output_file}")
    print(f"  Server: {ip}:{port}")
    print(f"  IP bytes: {'.'.join(str(x) for x in ip_octets)}")
    print(f"  Port (NBO): 0x{port_be:04x}")
    print(f"  Password: {password_bytes.hex()}")
    print(f"  Password length: {len(password_bytes)} bytes")


def main():
    if len(sys.argv) != 4:
        print("Usage: builder.py <ip> <port> <password>")
        print("Example: builder.py 127.0.0.1 4444 DEADBEEF")
        sys.exit(1)

    ip = sys.argv[1]
    port = int(sys.argv[2])
    password = sys.argv[3]

    try:
        generate_config(ip, port, password)
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
